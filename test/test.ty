// comments are written with two '/' characters
// multi-line comments will be for doc comments and will be written like jsdoc, but testable like rust

// variables can be declared constant, making them unmodifiable
const a = -5
// or mutatable with let
let b = 2

// enumerable types are declared as follows, similar to unions in other languages, they are called tags because they are both a union and enumerable and can contain values
const Day = tag
  | monday
  | tuesday
  | wednesday
  | thursday
  | friday
  | saturday
  | sunday

const next_weekday = fn(d: Day) Day {
 // tags can be matched on
 // return must be specified
 return match (d) {
  monday => tuesday
  tuesday => wednesday
  wednesday => thursday
  thursday => friday
  // rest operator specifies any remaining match arms
  _ => monday
 }
}

// functions are defined in the previous example, to give the lambda syntax for free
const c = [0,1,2,3].map(fn(x: usize) usize { return x + 2 })

// errors are first class citizens where control flow is designed to work well with errors.
type InvalidWeekday = error 

const assert_weekday = fn(d: Day) InvalidWeekday!Day {
 return match (d) {
  saturday => InvalidWeekday
  sunday => InvalidWeekday
  _ => d
 }
}
// InvalidWeekday!Day can be thought of as a tag of `InvalidWeekday | Day` the syntax gives errors more visiblity

// struct syntax
const Car = struct {
  wheels: f64,
  make: [char],
  model: [char],
  direction: u8,
}

// you can attach functions to structs
const drive = fn(self: Car, direction: u8) void {
  self.direction = direction
}

// arrays can be sized at compile time, or unsized (growable, shrinkable)
// here d is immutable, so the compiler can infer it to be size 11
// the elements inside d can be mutated
const d: [char] = "Hello There"
// here e is immutable, and the elements inside the array are immutable
const e: [const char] = "Hello There"

// can be explicit
const explicit: const[const char; 11] = "Hello There"

// here f is mutable, meaning the array can be lengthend or shortened. this will not compile, as explicitly sized arrays, can't be resized
let f: [char; 11] = "Hello There" //! we can't give this array a compile time known size, and still be mutable!

// here g is mutable, and its elements are mutable. can be lengthened, shortened, or elements mutated let g: [char] = "Hello There"
// can also use single quotes
let h: [char] = 'Hello There'

// values can be copied, moved, borrowed mutably, or borrowed immutably
// i is set to 5
const i = 5
// j is copied. All primative scalar types are copied
const j = i
// k is moved to l, k is no longer reachable after l has been assigned
let k = "Hello There"
let l = k

// count_spaces takes a read-only borrowed slice of an array of known or unknown length. & is a read-only borrow, and * is a mutable borrow
// to_check is read only slice with read only chars
const count_spaces = fn(to_check: &[&char]) f64 {
  let count: f64 = 0
  for (to_check) fn(x) void {
    if (x == ' ') {
      count += 1
    }
  }
  return count
}
// note: do not think of these as pointers, as &[&char] in tradional pointer terminolgy would mean this is a reference to an array of char references. this is clearly an array of chars, they are just read-only

// you can pass a value with ownership passed as well, (moved)
const count_char = fn(to_check: [char]) f64 { 
  let count: f64 = 0
  for (to_check) fn(x) void {
    count += 1
  }
  return count
}
const m = "Hello"
const spaces = count_char(m)
// m can no longer be referenced

const q = import "std.io"

// given the struct definition from earlier...
// const Car = struct {
//   wheels: f64
//   make: [char]
//   model: [char]
//   direction: u8
// }

let r = Car { 
  wheels: 0,
  make: "toyoba",
  model: "pribus",
  direction: 2
}

// values can be borrowed with & or *. this allows r to be usable again
const s = &r

// you can declare a block and return a value with break
let t = { 
  break 5 * -2 + 1 
}

// blocks are returned with break. functions and anonymous functions are returned with return

// most types can be implied and implicit. You can be explicit, function return types are the only required type
const mul2: fn(usize) usize = fn(a) usize { 
  return a * 2
}

// destructuring is supported
const { a, b, c } = import "std.thing"
