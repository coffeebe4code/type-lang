pub type Motorcycle = struct {
  name: [char],
  wheels: u8
}

// Data has a type. can be manually declared with : <type>
const x = 7;
const y: usize = 7;

// Types have types
// this is usually redundant
type Car: struct {[char],u8} = struct {
  name: [char],
  wheels: u8
}

// you can achieve polymorphism and generics with traits
type Movable = trait { 
  set_wheels: fn(self, wheels: u8) void,
  drive: fn(self) void
}

// you can then implement those traits
impl Car = trait(Movable) {
  pub set_wheels = fn(self, wheels: u8) {
    // do a thing!
  }
}

// default implementations can be achieved
const set_wheels_default = fn(self, wheels: u8) void {
  self.wheels = wheels;
}

// default implementation
impl Motorcycle = trait(Movable) {
  pub set_wheels = set_wheels_default
}


